1：springboot 项目主要依赖配置
      a:spring-boot-starter-parent
      b:spring-boot-starter-web(如果是web项目)
2:@import  导入bean ,可以将任何一个class 当成组件导入进去；相当于compotent
3：@conditional(value = Object.class)  条件注解 
4：@springbootApplication = @SpringbootConfiguration+@EnableAutoConfiguration+@ComponentScan
5：@ImportResource 导入自定义xml(location="chasspath:bean.xml")
6：springboot解决了版本冲突问题，通过start启动器 加载想要的东西，简化了配置
7：importSelector 通过类的全路径导入一个bean（组件） 通过import 注解导入，导入的类里面是不可以加注解的；
8：beanDefinitonRegister  通过bean对象导入一个bean（组件）, 通过import 注解导入；导入的类里面是不可以加注解的；
9：自动装配流程：通过springbootapplication 注解 进入，找到autoConfig 注解，通过注入的配置类，读取所有的待自动装配的bean
   通过selectImports 方法 查询自动装配的jar包下 meta下spring.factor 文件下的所有的 需要装配的类，例如找到redisAutoConfig类，就会加载
   该类，先读取该类的注解，通过注解判断是否加载该类，通过properties 读取自定义配置的属性，例如ip port，如果没有配置的属性就是用默认的
   ，继续读取注解的客户端连接类jedis，将该类装配进去，读取然后读取该类的信息，创建redisTemplate，这时候就可以使用了，如果自定义了redistTemplate，
   就会继续执行自定义的，可以人工设置一些参数，例如序列化方式等等；以上流程就是redis自动装配原理；说白了自动装配就是把需要的bean封装到一起，
   然后注入到spring容器中；
10：mybatis整合 的dao.java 必须加上Mapper注解，如果不加需要在启动类里面配置上ScanMapper 指定加载的mapper文件位置
11：ack 消息确认
12：kafka 可能会丢失消息，速度快；rocket性能高，但是高级特性收费，rabbit 综合能力比较强；activeMQ，并发高会丢失消息，综合能力一般
13：自定义springboot start启动器，根据自动装配原理；暂时搁置；
14：java -jar eureka-server-9000-0.0.1-SNAPSHOT.jar > log_yuedaoapi.file 2>&1 & 后台启动springboot 服务
15：后台启动 nohup java -jar hongyan-pushorder-core-1.0-SNAPSHOT-boot.jar > log/catalina_`date +%Y%m%d`.log  2>&1 &

问题（1）：自动装配的start 为什么会被spring的自动装配 装进去？
